/**
 * The Gridt Network API
 * Interact with the gridt network via this API. It provides several endpoints for creating and subscribing (to) movements and switching leaders.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: robin@gridt.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Body } from '../model/body';
import { Body1 } from '../model/body1';
import { Id } from '../model/id';
import { InlineResponse200 } from '../model/inlineResponse200';
import { Message } from '../model/message';
import { Movement } from '../model/movement';
import { Movements } from '../model/movements';
import { User } from '../model/user';
import { UserId } from '../model/userId';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Login to the gridt network
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authPost(body: Body, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public authPost(body: Body, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public authPost(body: Body, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public authPost(body: Body, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling authPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<InlineResponse200>(`${this.basePath}/auth`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List of all movements
     * Lists all movements on the server.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public movementsGet(observe?: 'body', reportProgress?: boolean): Observable<Movements>;
    public movementsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Movements>>;
    public movementsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Movements>>;
    public movementsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Movements>(`${this.basePath}/movements`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a movement
     * 
     * @param movementId Name or id of a movement.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public movementsMovementIdGet(movementId: Id, observe?: 'body', reportProgress?: boolean): Observable<Movement>;
    public movementsMovementIdGet(movementId: Id, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Movement>>;
    public movementsMovementIdGet(movementId: Id, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Movement>>;
    public movementsMovementIdGet(movementId: Id, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (movementId === null || movementId === undefined) {
            throw new Error('Required parameter movementId was null or undefined when calling movementsMovementIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Movement>(`${this.basePath}/movements/${encodeURIComponent(String(movementId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find a leader
     * If the user has any empty leader, find one for him.
     * @param movementId Name or id of a movement.
     * @param userId Identifier (name or id) of the leader that is to be replaced.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public movementsMovementIdLeaderPost(movementId: Id, userId: UserId, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public movementsMovementIdLeaderPost(movementId: Id, userId: UserId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public movementsMovementIdLeaderPost(movementId: Id, userId: UserId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public movementsMovementIdLeaderPost(movementId: Id, userId: UserId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (movementId === null || movementId === undefined) {
            throw new Error('Required parameter movementId was null or undefined when calling movementsMovementIdLeaderPost.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling movementsMovementIdLeaderPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<User>(`${this.basePath}/movements/${encodeURIComponent(String(movementId))}/leader`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Swap leader in movement
     * Swap a leader in a movement with a different one.
     * @param movementId Name or id of a movement.
     * @param userId Identifier (name or id) of the leader that is to be replaced.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public movementsMovementIdLeaderUserIdPost(movementId: Id, userId: UserId, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public movementsMovementIdLeaderUserIdPost(movementId: Id, userId: UserId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public movementsMovementIdLeaderUserIdPost(movementId: Id, userId: UserId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public movementsMovementIdLeaderUserIdPost(movementId: Id, userId: UserId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (movementId === null || movementId === undefined) {
            throw new Error('Required parameter movementId was null or undefined when calling movementsMovementIdLeaderUserIdPost.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling movementsMovementIdLeaderUserIdPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<User>(`${this.basePath}/movements/${encodeURIComponent(String(movementId))}/leader/${encodeURIComponent(String(userId))}/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Unsubscribe user from movement
     * The user that is currently logged in will be removed from the movement subscribers
     * @param movementId Name or id of a movement.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public movementsMovementIdSubscriberDelete(movementId: Id, observe?: 'body', reportProgress?: boolean): Observable<Message>;
    public movementsMovementIdSubscriberDelete(movementId: Id, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Message>>;
    public movementsMovementIdSubscriberDelete(movementId: Id, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Message>>;
    public movementsMovementIdSubscriberDelete(movementId: Id, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (movementId === null || movementId === undefined) {
            throw new Error('Required parameter movementId was null or undefined when calling movementsMovementIdSubscriberDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<Message>(`${this.basePath}/movements/${encodeURIComponent(String(movementId))}/subscriber`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Subscribe user to movement
     * The user that is currently logged in will be added to the subscribers of this movement.
     * @param movementId Name or id of a movement.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public movementsMovementIdSubscriberPut(movementId: Id, observe?: 'body', reportProgress?: boolean): Observable<Message>;
    public movementsMovementIdSubscriberPut(movementId: Id, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Message>>;
    public movementsMovementIdSubscriberPut(movementId: Id, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Message>>;
    public movementsMovementIdSubscriberPut(movementId: Id, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (movementId === null || movementId === undefined) {
            throw new Error('Required parameter movementId was null or undefined when calling movementsMovementIdSubscriberPut.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<Message>(`${this.basePath}/movements/${encodeURIComponent(String(movementId))}/subscriber`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Post a new update in movement
     * Tell the server that the user has performed the action related to this movement. 
     * @param movementId Name or id of a movement.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public movementsMovementIdUpdatePost(movementId: Id, observe?: 'body', reportProgress?: boolean): Observable<Message>;
    public movementsMovementIdUpdatePost(movementId: Id, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Message>>;
    public movementsMovementIdUpdatePost(movementId: Id, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Message>>;
    public movementsMovementIdUpdatePost(movementId: Id, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (movementId === null || movementId === undefined) {
            throw new Error('Required parameter movementId was null or undefined when calling movementsMovementIdUpdatePost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Message>(`${this.basePath}/movements/${encodeURIComponent(String(movementId))}/update`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new movement
     * 
     * @param body Description of the movement that is to be created.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public movementsPost(body: Movement, observe?: 'body', reportProgress?: boolean): Observable<Message>;
    public movementsPost(body: Movement, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Message>>;
    public movementsPost(body: Movement, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Message>>;
    public movementsPost(body: Movement, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling movementsPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Message>(`${this.basePath}/movements`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Movements the user is subscribed to.
     * This will return a list of all the movements this user is subscribed to and all his leaders in this movements. This is the **only** place where the information of his leader can be obtained. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public movementsSubscriptionsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Movement>>;
    public movementsSubscriptionsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Movement>>>;
    public movementsSubscriptionsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Movement>>>;
    public movementsSubscriptionsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Movement>>(`${this.basePath}/movements/subscriptions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Register an account
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerPost(body: Body1, observe?: 'body', reportProgress?: boolean): Observable<Message>;
    public registerPost(body: Body1, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Message>>;
    public registerPost(body: Body1, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Message>>;
    public registerPost(body: Body1, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling registerPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Message>(`${this.basePath}/register`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
