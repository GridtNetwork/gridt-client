{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nvar SwapService = /** @class */function () {\n  function SwapService() {\n    this.swapEvents = [];\n  }\n  SwapService.prototype.addSwapEvent = function (movement, user) {\n    var swapevent = {\n      movement: movement,\n      user: user,\n      date: new Date()\n    };\n    this.swapEvents.push(swapevent);\n  };\n  SwapService.prototype.getLastSwapEvent = function (movement) {\n    var events = __spreadArray([], this.swapEvents, true);\n    if (movement) {\n      // Using id, to prevent a situation where a movement gets updated\n      // and they don't compare completely anymore.\n      events = events.filter(function (e) {\n        return e.movement.id === movement.id;\n      });\n    }\n    if (!events.length) {\n      return null;\n    }\n    var lastSwapEvent = events.reduce(function (prev, current) {\n      return prev.date > current.date ? prev : current;\n    });\n    return lastSwapEvent;\n  };\n  SwapService.ɵfac = function SwapService_Factory(t) {\n    return new (t || SwapService)();\n  };\n  SwapService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SwapService,\n    factory: SwapService.ɵfac,\n    providedIn: \"root\"\n  });\n  return SwapService;\n}();\nexport { SwapService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}