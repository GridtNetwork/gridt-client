{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { map, tap, pluck, catchError, flatMap } from \"rxjs/operators\";\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nvar ApiService = /** @class */function () {\n  function ApiService(http, auth) {\n    this.http = http;\n    this.auth = auth;\n    /*\n     * Subscribe to this observable to ready the API.\n     */\n    this.URL = \"https://api.gridt.org\";\n    /**\n     * Reuse a policy: Rll movements that have been previously obtained.\n     */\n    this._allMovements$ = new BehaviorSubject([]);\n    /**\n     * Reuse all subscriptions that have been previously obtained.\n     */\n    this._subscriptions$ = new BehaviorSubject([]);\n  }\n  Object.defineProperty(ApiService.prototype, \"allMovements$\", {\n    get: function () {\n      return this._allMovements$.asObservable();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ApiService.prototype, \"subscriptions$\", {\n    get: function () {\n      return this._subscriptions$.asObservable();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /*\n   * Catch any error that is generated from the user not having a valid token.\n   */\n  ApiService.prototype.handleBadAuth = function () {\n    // This function factory is necessary because the value in \"this\" gets\n    // reset to a the \"handleBadAuth\" function instead of the service.\n    return function (error) {\n      // JWT Error\n      if (error.status === 401) {\n        return throwError(error.error.description);\n      }\n      // Server error\n      if (error.error) {\n        return throwError(error.error.message);\n      }\n      return throwError(error);\n    };\n  };\n  /*\n   * Request the server to create a new movement.\n   */\n  ApiService.prototype.createMovement$ = function (movement) {\n    var _this = this;\n    console.debug(\"Creating movement \\\"\".concat(movement.name, \"\\\"\"));\n    return this.auth.readyAuthentication$.pipe(flatMap(function (options) {\n      return _this.http.post(\"\".concat(_this.URL, \"/movements\"), movement, options);\n    }), catchError(this.handleBadAuth()), pluck(\"message\"));\n  };\n  /**\n   * This simple helper functions grants the ability to update a movement in\n   * the behavior subject containing a list of all movements.\n   * @param bsubject BehaviorSubject that you want to update.\n   * @param movement The new version of the movement.\n   */\n  ApiService.prototype.replace_movement_in_bsubject = function (bsubject, movement) {\n    var all_movements = bsubject.getValue();\n    var index = all_movements.findIndex(function (m) {\n      return m.name == movement.name;\n    });\n    if (index != -1) {\n      all_movements[index] = movement;\n    } else {\n      all_movements.push(movement);\n    }\n    bsubject.next(all_movements);\n  };\n  /*\n   * Request single movement from server.\n   */\n  ApiService.prototype.getMovement$ = function (movement_id) {\n    var _this = this;\n    console.debug(\"Getting movement \\\"\".concat(movement_id, \"\\\" from server.\"));\n    return this.auth.readyAuthentication$.pipe(flatMap(function (options) {\n      return _this.http.get(\"\".concat(_this.URL, \"/movements/\").concat(movement_id), options);\n    }), catchError(this.handleBadAuth()), tap(function (movement) {\n      _this.replace_movement_in_bsubject(_this._subscriptions$, movement);\n      _this.replace_movement_in_bsubject(_this._allMovements$, movement);\n    }));\n  };\n  /**\n   * Request all movements from the server.\n   */\n  ApiService.prototype.getAllMovements = function () {\n    var _this = this;\n    console.debug(\"Getting all movements from the server\");\n    this.auth.readyAuthentication$.pipe(flatMap(function (options) {\n      return _this.http.get(\"\".concat(_this.URL, \"/movements\"), options);\n    }), catchError(this.handleBadAuth()), tap(function (movements) {\n      return _this._allMovements$.next(movements);\n    }), map(function () {\n      return true;\n    })).subscribe();\n  };\n  /**\n   * Request all movements that the user is subscribed to from the server.\n   */\n  ApiService.prototype.getSubscriptions = function () {\n    var _this = this;\n    console.debug(\"Getting all movements that the user is subscribed to.\");\n    this.auth.readyAuthentication$.pipe(flatMap(function (options) {\n      return _this.http.get(\"\".concat(_this.URL, \"/movements/subscriptions\"), options);\n    }), tap(function (movements) {\n      return _this._subscriptions$.next(movements);\n    }), catchError(this.handleBadAuth())).subscribe();\n  };\n  /**\n   * Subscribe user to a movement.\n   * @param movement_id The movement (id or string) that the user wants to subscribe to.\n   */\n  ApiService.prototype.subscribeToMovement$ = function (movement_id) {\n    var _this = this;\n    console.debug(\"Subscribing to movement \\\"\".concat(movement_id, \"\\\".\"));\n    return this.auth.readyAuthentication$.pipe(flatMap(function (options) {\n      return _this.http.put(\"\".concat(_this.URL, \"/movements/\").concat(movement_id, \"/subscriber\"), {},\n      // This request does not require input, but the function needs a body.\n      options);\n    }), pluck(\"message\"), catchError(this.handleBadAuth()));\n  };\n  /**\n   * Unsubscribe user from a movement.\n   * @param movement_id The movement (id or string) that the user wants to subscribe to.\n   */\n  ApiService.prototype.unsubscribeFromMovement$ = function (movement_id) {\n    var _this = this;\n    console.debug(\"Unsubscribing from movement \\\"\".concat(movement_id, \"\\\".\"));\n    return this.auth.readyAuthentication$.pipe(flatMap(function (options) {\n      return _this.http.delete(\"\".concat(_this.URL, \"/movements/\").concat(movement_id, \"/subscriber\"), options);\n    }), pluck(\"message\"), catchError(this.handleBadAuth()));\n  };\n  /**\n   * Swap one of the leaders identified with either username or user id in a\n   * movement identified with a number or string.\n   */\n  ApiService.prototype.swapLeader$ = function (movement, user) {\n    var _this = this;\n    console.debug(\"Swapping leader \\\"@\".concat(user.username, \"#\").concat(user.id, \"\\\" in movement \\\"%\").concat(movement.name, \"#\").concat(movement.id, \"\\\".\"));\n    return this.auth.readyAuthentication$.pipe(flatMap(function (options) {\n      return _this.http.post(\"\".concat(_this.URL, \"/movements/\").concat(movement.id, \"/leader/\").concat(user.id), {}, options);\n    }), map(function (response) {\n      if (\"message\" in response) {\n        throw response.message;\n      }\n      return response;\n    }), tap(function (new_user) {\n      movement.leaders = movement.leaders.filter(function (u) {\n        return u.username != user.username;\n      });\n      movement.leaders.push(new_user);\n      _this.replace_movement_in_bsubject(_this._allMovements$, movement);\n      _this.replace_movement_in_bsubject(_this._subscriptions$, movement);\n    }), catchError(this.handleBadAuth()));\n  };\n  /*\n   * Notify the server that the user has performed the movement related action.\n   */\n  ApiService.prototype.sendSignal$ = function (movement, message) {\n    var _this = this;\n    console.debug(\"Sending signal to movement \\\"\".concat(movement.name, \"\\\"\"));\n    var body = message ? {\n      message: message\n    } : message;\n    return this.auth.readyAuthentication$.pipe(flatMap(function (options) {\n      return _this.http.post(\"\".concat(_this.URL, \"/movements/\").concat(movement.id, \"/signal\"), body, options);\n    }), pluck(\"message\"), catchError(this.handleBadAuth()));\n  };\n  /**\n  * Observable to obtain identity from server.\n  */\n  ApiService.prototype.userIdentity$ = function () {\n    var _this = this;\n    return this.auth.readyAuthentication$.pipe(flatMap(function (options) {\n      return _this.http.get(\"\".concat(_this.URL, \"/identity\"), options);\n    }), catchError(this.handleBadAuth()));\n  };\n  ;\n  /**\n  * Changes the biography of the user on the server.\n  * @param bio the new bio that the user wants.\n  */\n  ApiService.prototype.changeBio$ = function (bio) {\n    var _this = this;\n    console.debug(\"Saving new biography to the server.\");\n    return this.auth.readyAuthentication$.pipe(flatMap(function (options) {\n      return _this.http.put(\"\".concat(_this.URL, \"/bio\"), {\n        bio: bio\n      }, options);\n    }), catchError(this.handleBadAuth()), pluck(\"message\"));\n  };\n  /**\n  * Changes the password of the user on the server.\n  * @param old_password The password of the user before changing it.\n  * @param new_password The new password of the user after changing it.\n  */\n  ApiService.prototype.changePassword$ = function (old_password, new_password) {\n    var _this = this;\n    console.debug(\"Saving new password to the server.\");\n    return this.auth.readyAuthentication$.pipe(flatMap(function (options) {\n      return _this.http.post(\"\".concat(_this.URL, \"/change_password\"), {\n        old_password: old_password,\n        new_password: new_password\n      }, options);\n    }), catchError(this.handleBadAuth()), pluck(\"message\"));\n  };\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ApiService;\n}();\nexport { ApiService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}