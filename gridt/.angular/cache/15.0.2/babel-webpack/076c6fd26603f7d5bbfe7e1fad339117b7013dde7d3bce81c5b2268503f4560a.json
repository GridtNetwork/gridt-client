{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\nexport class SecureStoragePluginWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.PREFIX = 'cap_sec_';\n    this.addPrefix = key => this.PREFIX + key;\n    this.removePrefix = key => key.replace(this.PREFIX, '');\n  }\n  get(options) {\n    const value = localStorage.getItem(this.addPrefix(options.key));\n    return value !== null ? Promise.resolve({\n      value: atob(value)\n    }) : Promise.reject('Item with given key does not exist');\n  }\n  set(options) {\n    localStorage.setItem(this.addPrefix(options.key), btoa(options.value));\n    return Promise.resolve({\n      value: true\n    });\n  }\n  remove(options) {\n    if (localStorage.getItem(this.addPrefix(options.key))) {\n      localStorage.removeItem(this.addPrefix(options.key));\n      return Promise.resolve({\n        value: true\n      });\n    } else {\n      return Promise.reject('Item with given key does not exist');\n    }\n  }\n  clear() {\n    for (const key in localStorage) {\n      if (key.indexOf(this.PREFIX) === 0) {\n        localStorage.removeItem(key);\n      }\n    }\n    return Promise.resolve({\n      value: true\n    });\n  }\n  keys() {\n    const keys = Object.keys(localStorage).filter(k => k.indexOf(this.PREFIX) === 0).map(this.removePrefix);\n    return Promise.resolve({\n      value: keys\n    });\n  }\n  getPlatform() {\n    return Promise.resolve({\n      value: 'web'\n    });\n  }\n}\n//# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}