{"ast":null,"code":"import { __awaiter, __decorate, __generator, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\nimport { Observable } from 'rxjs';\nimport { ApiService } from '../core/api.service';\nimport { SwapService } from '../core/swap.service';\nvar HomePage = /** @class */function () {\n  function HomePage(api, alertCtrl, swapService) {\n    this.api = api;\n    this.alertCtrl = alertCtrl;\n    this.swapService = swapService;\n    this.movements$ = new Observable();\n  }\n  HomePage.prototype.ngOnInit = function () {\n    this.movements$ = this.api.subscriptions$;\n    this.api.getSubscriptions();\n  };\n  HomePage.prototype.ngOnDestroy = function () {};\n  /**\n   * Extract the timezone of a date string.\n   * @param date_string ISO Date string\n   */\n  HomePage.prototype.extract_timezone = function (date_string) {\n    return parseInt(date_string.match(/\\+(\\d\\d):\\d\\d/g)[0]);\n  };\n  /**\n   * Calculate when the last global signal reset was.\n   * @param interval Interval that on which the event is supposed to happen.\n   * @param hour_offset Timezone offset to account for the possibility that the server is not in the timezone of the client.\n   */\n  HomePage.prototype.getLastOccurence = function (interval, hour_offset) {\n    var date = new Date();\n    switch (interval) {\n      case \"daily\":\n        date.setUTCHours(hour_offset, 0, 0, 0);\n        break;\n      case \"twice daily\":\n        if (date.getUTCHours() < 12) {\n          date.setUTCHours(hour_offset, 0, 0, 0);\n        } else {\n          date.setUTCHours(hour_offset + 12, 0, 0, 0);\n        }\n        break;\n      case \"weekly\":\n        date.setUTCDate(date.getUTCDate() - date.getUTCDay());\n        date.setUTCHours(hour_offset, 0, 0, 0);\n        break;\n    }\n    return date;\n  };\n  /**\n   * Check if the user should be allowed to swap his leaders in this movement.\n   * @param movement Movement in which the leaders can be swapped or not.\n   */\n  HomePage.prototype.canSwap = function (movement) {\n    if (!movement.last_signal_sent) {\n      return false;\n    }\n    var last_signal_sent = new Date(movement.last_signal_sent.time_stamp);\n    var timezone;\n    for (var _i = 0, _a = movement.leaders; _i < _a.length; _i++) {\n      var leader = _a[_i];\n      if (leader.last_signal) {\n        timezone = this.extract_timezone(leader.last_signal.time_stamp);\n        break;\n      }\n    }\n    if (timezone === undefined) {\n      return true;\n    }\n    var last_reset = this.getLastOccurence(movement.interval, timezone);\n    if (this.swapService.getLastSwapEvent(movement)) {\n      var last_swap = this.swapService.getLastSwapEvent(movement).date;\n      return last_swap < last_reset && last_reset < last_signal_sent;\n    }\n    ;\n    return last_signal_sent > last_reset;\n  };\n  HomePage.prototype.isLeaderDone = function (leader, movement) {\n    var server_timezone = null;\n    var last_signal;\n    if (leader.last_signal) {\n      server_timezone = this.extract_timezone(leader.last_signal.time_stamp);\n      last_signal = new Date(Date.parse(leader.last_signal.time_stamp));\n    } else {\n      return false;\n    }\n    return this.getLastOccurence(movement.interval, server_timezone) < last_signal;\n  };\n  HomePage.prototype.confirmSwapLeader = function (movement, leader) {\n    return __awaiter(this, void 0, void 0, function () {\n      var el;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.alertCtrl.create({\n              header: \"Confirm leader change\",\n              message: \"Are you sure you want to replace user \".concat(leader.username, \"\\\"?\"),\n              buttons: [{\n                text: \"Cancel\",\n                role: \"cancel\"\n              }, {\n                text: \"Yes\",\n                handler: function () {\n                  return _this.swapLeader(movement, leader);\n                }\n              }]\n            })];\n          case 1:\n            el = _a.sent();\n            el.present();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  HomePage.prototype.swapLeader = function (movement, leader) {\n    var _this = this;\n    this.swapService.addSwapEvent(movement, leader);\n    this.api.swapLeader$(movement, leader).subscribe(function (user) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var el;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.alertCtrl.create({\n                header: \"Found new leader\",\n                message: \"Your new leader is \".concat(user.username, \".\"),\n                buttons: [\"okay\"]\n              })];\n            case 1:\n              el = _a.sent();\n              el.present();\n              return [2 /*return*/];\n          }\n        });\n      });\n    }, function (error) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var el;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, this.alertCtrl.create({\n                header: \"No new leader found\",\n                message: \"We tried to find you a new user but: \".concat(error),\n                buttons: [\"okay...\"]\n              })];\n            case 1:\n              el = _a.sent();\n              el.present();\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  HomePage.prototype.readyToSignal = function (movement) {\n    if (movement.last_signal_sent) {\n      var time_stamp = movement.last_signal_sent.time_stamp;\n      var server_timezone = this.extract_timezone(time_stamp);\n      var last_reset = this.getLastOccurence(movement.interval, server_timezone);\n      var last_signal = new Date(time_stamp);\n      return last_reset > last_signal;\n    } else {\n      return true;\n    }\n  };\n  HomePage.prototype.confirmSignal = function (movement) {\n    return __awaiter(this, void 0, void 0, function () {\n      var el;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.alertCtrl.create({\n              header: \"Want to send a message with your signal?\",\n              message: '',\n              cssClass: \"confirmSignal-alert\",\n              inputs: [{\n                name: \"message\",\n                placeholder: \"message\",\n                type: \"text\"\n              }],\n              buttons: [{\n                text: \"Cancel\",\n                role: 'cancel'\n              }, {\n                text: \"Send!\",\n                handler: function (data) {\n                  if (data.message !== null && data.message.length < 140) {\n                    _this.signal(movement, data.message);\n                  } else if (data.message == null) {\n                    el.message = 'Your message is empty!';\n                    return false;\n                  } else if (data.message.length > 140) {\n                    el.message = 'Your message is longer than 140 characters!';\n                    return false;\n                  } else {\n                    el.message = 'Something went wrong, please try again.';\n                    return false;\n                  }\n                }\n              }]\n            })];\n          case 1:\n            el = _a.sent();\n            el.present();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  HomePage.prototype.signal = function (movement, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        this.api.sendSignal$(movement, message).subscribe(function () {\n          _this.api.getMovement$(movement.id).subscribe();\n        }, function (error) {\n          _this.alertCtrl.create({\n            header: 'Something went wrong while sending your signal.',\n            message: error,\n            buttons: ['Okay']\n          }).then(function (alertEl) {\n            return alertEl.present();\n          });\n        });\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  var _a;\n  HomePage = __decorate([Component({\n    selector: 'app-home',\n    templateUrl: './home.page.html',\n    styleUrls: ['./home.page.scss']\n  }), __metadata(\"design:paramtypes\", [ApiService, typeof (_a = typeof AlertController !== \"undefined\" && AlertController) === \"function\" ? _a : Object, SwapService])], HomePage);\n  return HomePage;\n}();\nexport { HomePage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}