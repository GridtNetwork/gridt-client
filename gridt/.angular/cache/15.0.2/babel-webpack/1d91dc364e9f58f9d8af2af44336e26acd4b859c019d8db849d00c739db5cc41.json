{"ast":null,"code":"import 'capacitor-secure-storage-plugin';\nimport { Plugins } from '@capacitor/core';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nvar SecureStoragePlugin = Plugins.SecureStoragePlugin;\nvar SecureStorageService = /** @class */function () {\n  function SecureStorageService() {}\n  SecureStorageService.prototype.get$ = function (key) {\n    return new Observable(function (observer) {\n      SecureStoragePlugin.get({\n        key: key\n      }).then(function (valueObj) {\n        var value = valueObj.value;\n        if (value === atob(null) || !value) {\n          observer.error(\"Key \\\"\".concat(key, \"\\\" does not exist in the secure storage.\"));\n          return;\n        } else {\n          var data = JSON.parse(value);\n          observer.next(data);\n          observer.complete();\n        }\n      }).catch(function () {\n        return observer.error(\"Key \\\"\".concat(key, \"\\\" does not exist in the secure storage.\"));\n      });\n    });\n  };\n  SecureStorageService.prototype.set$ = function (key, value) {\n    return new Observable(function (observer) {\n      var data = JSON.stringify(value);\n      SecureStoragePlugin.set({\n        key: key,\n        value: data\n      }).then(function (succesObj) {\n        if (succesObj.value) {\n          observer.next(true);\n        } else {\n          observer.error(\"Could not set \".concat(key, \" in the secure storage.\"));\n        }\n      });\n    });\n  };\n  SecureStorageService.prototype.clear$ = function () {\n    return new Observable(function (observer) {\n      SecureStoragePlugin.clear().then(function (succesObj) {\n        if (succesObj.value) {\n          observer.next(true);\n          observer.complete();\n        } else {\n          observer.error(\"Could not clear the secure storage.\");\n        }\n      });\n    });\n  };\n  SecureStorageService.prototype.remove$ = function (key) {\n    return new Observable(function (observer) {\n      SecureStoragePlugin.remove({\n        key: key\n      }).then(function (succesObj) {\n        if (succesObj.value) {\n          observer.next(true);\n          observer.complete();\n        } else {\n          observer.error(\"Could not remove \".concat(key, \" from the secure storage.\"));\n        }\n      });\n    });\n  };\n  SecureStorageService.ɵfac = function SecureStorageService_Factory(t) {\n    return new (t || SecureStorageService)();\n  };\n  SecureStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SecureStorageService,\n    factory: SecureStorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return SecureStorageService;\n}();\nexport { SecureStorageService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}