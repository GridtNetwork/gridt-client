{"ast":null,"code":"import { Route, UrlSegment, Router } from '@angular/router';\nimport { tap, take } from 'rxjs/operators';\nimport { AuthService } from '../core/auth.service';\nimport { ApiService } from '../core/api.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../core/auth.service\";\nimport * as i2 from \"../core/api.service\";\nimport * as i3 from \"@angular/router\";\nvar LoginGuard = /** @class */function () {\n  function LoginGuard(auth, api, router) {\n    this.auth = auth;\n    this.api = api;\n    this.router = router;\n  }\n  LoginGuard.prototype.canLoad = function (route, segments) {\n    var _this = this;\n    return this.auth.isLoggedIn$.pipe(take(1), tap(function (isAuthenticated) {\n      if (!isAuthenticated) {\n        console.error(\"User \".concat(_this.api.username ? _this.api.username + ' ' : '', \"is not logged in. Guarding page and returning to /login.\"));\n        _this.router.navigateByUrl('/login');\n      } else {\n        console.debug('Passed the guard');\n      }\n    }));\n  };\n  LoginGuard.ɵfac = function LoginGuard_Factory(t) {\n    return new (t || LoginGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ApiService), i0.ɵɵinject(i3.Router));\n  };\n  LoginGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginGuard,\n    factory: LoginGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginGuard;\n}();\nexport { LoginGuard };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}